AWSTemplateFormatVersion: '2010-09-09'

Description: This AWS CloudFormation Template configures an environment that can be used for the Container DevSecOps workshop. 

Parameters:
  
  ResourceName:
    Type: String
    Default: container-devsecops-wksp
    AllowedValues: 
      - container-devsecops-wksp
    Description: Prefix of Resources created for this workshop.

  FailWhen:
    Type: String
    Default: High
    AllowedValues: 
      - Low
      - Medium
      - High
      - Critical
    Description: Threshold to fail the pipeline if app image has vulnerabilities

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - 
        Label: 
          default: "Resource and Notification Configuration"
        Parameters: 
          - ResourceName
      - 
        Label: 
          default: "Fail Pipeline Threshold"
        Parameters: 
          - FailWhen

    ParameterLabels: 
      ResourceName:
        default: "Resource Prefix"
      FailWhen:
        default: "Fail When"


Mappings: {}

Conditions: {}

Resources:

  ################### Repo Resources ###################

  ### Application Repository
  AppRepository: 
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Sample application repository to support the container devsecops workshop.
      RepositoryName: !Join [ '-', [ !Ref ResourceName, 'app'  ] ]

  ### Configuration Repository
  ConfigRepository: 
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Configuration repository to support the container devsecops workshop.
      RepositoryName: !Join [ '-', [ !Ref ResourceName, 'config'  ] ]

  ### Initial commit to sample application - Custom resource
  RepositoryInitialCommit:
    DependsOn: 
      - AppRepository
      - ConfigRepository
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt 'LambdaRepositoryInitialCommit.Arn'
      Repo: !Join [ '-', [ !Ref ResourceName, 'app'  ] ]
      RepoConfig: !Join [ '-', [ !Ref ResourceName, 'config'  ] ]

  ### Initial commit to sample application - Lambda Role
  LambdaRepositoryInitialCommitRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'lambda', 'initial-commit'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: InitialCommitPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                Resource: '*'

  ### Initial commit to sample application - Lambda
  LambdaRepositoryInitialCommit: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'initial-commit'  ] ]
      Handler: "initial-commit.handler"
      Description: "Creates initial commits to respository."
      Role: !GetAtt 'LambdaRepositoryInitialCommitRole.Arn'
      Code: 
        S3Bucket: 'sa-security-specialist-workshops-us-east-2'
        S3Key: 'devsecops/containers/initial-commit.zip'
      Runtime: "python2.7"
      Timeout: "35"
  
  ### ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Join [ '-', [ !Ref ResourceName, 'sample'  ] ]

  ################### Attendee IDE - Cloud9 ###################

  ### Cloud9 - Network Infrastructure
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref ResourceName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  RouteTable:
    DependsOn:
      - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  PublicRoute:
    DependsOn:
      - RouteTable
      - GatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  SubnetAssoc:
    DependsOn:
      - Subnet
      - RouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: 
            Fn::Join:
            - '-'
            - [!Ref ResourceName, 'compromised']
        -
          Key: Network
          Value: Public
  InboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535
  OutboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  SubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref PublicNACL

  ### Cloud9 IDE
  Cloud9IDE:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Repositories: 
        - PathComponent: /sample-application
          RepositoryUrl: !GetAtt AppRepository.CloneUrlHttp
      Description: This is the IDE you will be using to complete the Container DevSecOps workshop.
      InstanceType: t2.small
      Name: !Join [ '-', [ !Ref ResourceName, 'ide'  ] ]
      SubnetId: !Ref Subnet

  ### Feedback Loop - Pull Request
  PREventRuleRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'cloudwatch', 'pr'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: PRPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codepipeline:*
                Resource: '*'

  PREventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref ResourceName, 'pr'  ] ]
      Description: "Trigger notifications based on CodeCommit Pull Requests"
      EventPattern:
        source:
          - "aws.codecommit"
        detail-type:
          - "CodeCommit Pull Request State Change"
        resources:
          - !GetAtt AppRepository.Arn
        detail:
          event:
            - "pullRequestSourceBranchUpdated"
            - "pullRequestCreated"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaPR.Arn
          Id: !Join [ '-', [ !Ref ResourceName, 'pr'  ] ]
        - Arn: !Join [ ':', [ 'arn:aws:codepipeline', !Ref "AWS::Region", !Ref "AWS::AccountId", !Ref CodePipeline  ] ]
          Id: !Join [ '-', [ !Ref ResourceName, 'pr', 'codepipeline'  ] ]
          RoleArn: !GetAtt PREventRuleRole.Arn

  LambdaPRCommentRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'lambda', 'pr'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: PRPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                  - codebuild:*
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource: '*'

  LambdaPR: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'pr'  ] ]
      Description: "Adds an initial comment to the pull request."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref ResourceName
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import datetime
          import boto3

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')

          def handler(event, context):
            # Log event
            print(event)

            # Pull request Event
            if event['detail']['event'] in ['pullRequestSourceBranchUpdated', 'pullRequestCreated']:
              
              # Set variables
              pull_request_id = event['detail']['pullRequestId']
              repository_name = event['detail']['repositoryNames'][0]
              source_commit = event['detail']['sourceCommit']
              destination_commit = event['detail']['destinationCommit']

              # Write commit details to SSM
              ssm.put_parameter(
                Name='prid',
                Description='Pull Request ID',
                Value=pull_request_id,
                Overwrite=True,
                Type='String'
              )

              ssm.put_parameter(
                Name='repo',
                Description='Repository Name',
                Value=repository_name,
                Overwrite=True,
                Type='String'
              )

              ssm.put_parameter(
                Name='sourceCommit',
                Description='Source Commit',
                Value=source_commit,
                Overwrite=True,
                Type='String'
              )

              ssm.put_parameter(
                Name='destinationCommit',
                Description='Destination Commit',
                Value=destination_commit,
                Overwrite=True,
                Type='String'
              )

              # Add comments to PR
              codecommit_client.post_comment_for_pull_request(
                pullRequestId = pull_request_id,
                repositoryName = repository_name,
                beforeCommitId = source_commit,
                afterCommitId = destination_commit,
                content = '**Build started at {}.  Starting security testing.**'.format(datetime.datetime.utcnow().time())
              )
            
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaPR:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'pr'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt PREventRule.Arn

  ################### FEEDBACK LOOPS ###################

  ### Feedback Loop - Dockerfile Analysis CodeBuild

  CBDFEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref ResourceName, 'codebuild-dockerfile'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the static analysis of the Dockerfile."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildDFProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBDF.Arn
          Id: !Join [ '-', [ !Ref ResourceName, 'codebuild-dockerfile'  ] ]

  LambdaCBDF: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-dockerfile'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the Dockerfile static analysis codebuild."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref ResourceName
          CODEBUILDDFPROJECT: !Ref CodeBuildDFProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          dfproject = os.environ['CODEBUILDDFPROJECT']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            build_results = ssm.get_parameter(
              Name='codebuild-dockerfile-results'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            if event['detail']['project-name'] in [dfproject]:
              build_results = json.loads(build_results['Parameter']['Value'])
              # Add Errors
              errors = '## Static Analysis - Dockerfile Configuration (using Hadolint)\n'
              if not build_results:
                errors = errors + 'No Misconfigurations!'
              else:
                for i in build_results:
                  errors = errors + '* **%s** (%s): %s \n' % (i['code'], i['level'], i['message'])
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )

            ssm.delete_parameter(
              Name='codebuild-dockerfile-results'
            )
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBDF:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-dockerfile'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBDFEventRule.Arn

  ### Feedback Loop - Secrets Scanning CodeBuild

  CBSCEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref ResourceName, 'codebuild-secrets'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the secrets analysis."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildSecretsProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBSC.Arn
          Id: !Join [ '-', [ !Ref ResourceName, 'codebuild-secrets'  ] ]

  LambdaCBSC: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-secrets'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the secrets analysis codebuild."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref ResourceName
          CODEBUILDSCPROJECT: !Ref CodeBuildSecretsProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          scproject = os.environ['CODEBUILDSCPROJECT']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            build_results = ssm.get_parameter(
              Name='codebuild-secrets-results'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            if event['detail']['project-name'] in [scproject]:
              build_results = build_results['Parameter']['Value']
              # Add Errors
              errors = '## Static Analysis - Secrets Scanning  (using truffleHog)\n'
              if build_results == '[]':
                errors = errors + 'No secrets found!'
              else:
                errors = errors + 'Secrets found! Please review the logs and remove any sensitive data.'
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )

            ssm.delete_parameter(
              Name='codebuild-secrets-results'
            )
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBSC:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-secrets'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBSCEventRule.Arn
  
  ### Feedback Loop - Vunerability Scanning CodeBuild

  CBVCEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref ResourceName, 'codebuild-vulnerability'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the vulnerability scanning."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildVulnProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBVC.Arn
          Id: !Join [ '-', [ !Ref ResourceName, 'codebuild-vulnerability'  ] ]

  LambdaCBVC: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-vulnerability'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the vulnerability scanning codebuild."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref ResourceName
          CODEBUILDVCPROJECT: !Ref CodeBuildVulnProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          vcproject = os.environ['CODEBUILDVCPROJECT']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            build_results = ssm.get_parameter(
              Name='codebuild-secrets-results'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            sec_hub = 'https://%s.console.aws.amazon.com/securityhub/' % event['region'] 
            if event['detail']['project-name'] in [vcproject]:
              build_results = build_results['Parameter']['Value']
              # Add Errors
              errors = '## Static Analysis - Vulnerability Scanning  (using Anchore)\n'
              if build_results == '[]':
                errors = errors + 'No critical or high findings!  Please manage all other vulnerabilities in [Security Hub](%s).' % sec_hub
              else:
                errors = errors + 'Critical or high findings found! Please review the logs and fix the vulnerabilities.'
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )

            #ssm.delete_parameter(
            #  Name='codebuild-secrets-results'
            #)
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBVC:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-vulnerability'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBVCEventRule.Arn
  
  ### Feedback Loop - Merge PR, Build and Push Image

  CBPUEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [ !Ref ResourceName, 'codebuild-push'  ] ]
      Description: "Triggers when builds fail/pass in CodeBuild for the Build and Push Stage."
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildPushProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaCBPU.Arn
          Id: !Join [ '-', [ !Ref ResourceName, 'codebuild-push'  ] ]

  LambdaCBPU: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-push'  ] ]
      Description: "Adds a comment to the pull request regarding the success or failure of the push codebuild project."
      Handler: "index.handler"
      Environment:
        Variables:
          PREFIX: !Ref ResourceName
          CODEBUILDVCPROJECT: !Ref CodeBuildPushProject
      Role: !GetAtt 'LambdaPRCommentRole.Arn'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          codecommit_client = boto3.client('codecommit')
          ssm = boto3.client('ssm')
          puproject = os.environ['CodeBuildPushProject']

          def handler(event, context):

            # Log event
            print(json.dumps(event))

            # Get PR Details
            pull_request_id = ssm.get_parameter(
              Name='prid'
            )

            repository_name = ssm.get_parameter(
              Name='repo'
            )

            source_commit = ssm.get_parameter(
              Name='sourceCommit'
            )

            destination_commit = ssm.get_parameter(
              Name='destinationCommit'
            )

            s3_prefix = 's3-{0}'.format(event['region']) if event['region'] != 'us-east-1' else 's3'
            sec_hub = 'https://%s.console.aws.amazon.com/securityhub/' % event['region'] 
            if event['detail']['project-name'] in [puproject]:
              errors = '## Image Build and Push\n'
              if event['detail']['build-status'] == 'SUCCEEDED':
                errors = errors + 'Image has successfully been built and pushed to the AWS ECR repository.  The Pull Request has been merged and closed.'
              else:
                errors = errors + 'Image has failed to build.  Please review the logs'
              for phase in event['detail']['additional-information']['phases']:
                if phase.get('phase-status') == 'FAILED':
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/failing.svg'.format(s3_prefix, event['region'])
                    content = '![Failing]({0} "Failing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors
                    break
                else:
                    badge = 'https://{0}.amazonaws.com/sa-security-specialist-workshops-{1}/devsecops/containers/badges/passing.svg'.format(s3_prefix, event['region'])
                    content = '![Passing]({0} "Passing") - See the [Logs]({1})\n'.format(badge, event['detail']['additional-information']['logs']['deep-link'])
                    content = content + errors

            codecommit_client.post_comment_for_pull_request(
              pullRequestId = pull_request_id['Parameter']['Value'],
              repositoryName = repository_name['Parameter']['Value'],
              beforeCommitId = source_commit['Parameter']['Value'],
              afterCommitId = destination_commit['Parameter']['Value'],
              content = content
            )
      Runtime: "python2.7"
      Timeout: "35"
      MemorySize: 128

  PermissionForEventsToInvokeLambdaCBPU:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'codebuild-push'  ] ]
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CBPUEventRule.Arn

  ################### Pipeline ###################

  ### CodePipeline - Artifact Bucket
  PipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Join [ '-', [ !Ref ResourceName, !Ref "AWS::AccountId", !Ref "AWS::Region", 'artifacts'  ] ]

  ### CodePipeline - Service Role
  CodePipelineRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'codepipeline', 'service'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - codepipeline.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: ServicePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListObject
                Resource: [!Join [ '', [ !GetAtt 'PipelineBucket.Arn', '/*'  ] ], !GetAtt 'PipelineBucket.Arn' ]
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: '*'
  
  ### CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      RoleArn: !GetAtt 'CodePipelineRole.Arn'
      Name: !Join [ '-', [ !Ref ResourceName, 'pipeline'  ] ]
      Stages:
        - Name: PullRequest
          Actions:
            - Name: AppSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: "AppSource"
              Configuration:
                BranchName: "development"
                RepositoryName: !Join [ '-', [ !Ref ResourceName, 'app'  ] ]
              RunOrder: 1
            - Name: ConfigSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: "ConfigSource"
              Configuration:
                BranchName: "master"
                RepositoryName: !Join [ '-', [ !Ref ResourceName, 'config'  ] ]
              RunOrder: 1
        - Name: 'StaticAnalysis-DockerfileConfiguration'
          Actions:
            - Name: Validation
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "DFAppSourceOutput"
                - Name: "DFConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildDFProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1
        - Name: 'StaticAnalysis-Secrets'
          Actions:
            - Name: Validation
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "SecretsAppSourceOutput"
                - Name: "SecretsConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildSecretsProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1
        - Name: 'VulnAnalysis-Dockerbuild'
          Actions:
            - Name: BuildPushAndScan
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "VulnAppSourceOutput"
                - Name: "VulnConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildVulnProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1
        - Name: 'PushImage'
          Actions:
            - Name: Build
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: "PushAppSourceOutput"
                - Name: "PushConfigSourceOutput"
              InputArtifacts:
                - Name: "AppSource"
                - Name: "ConfigSource"
              Configuration:
                  ProjectName: !Ref CodeBuildPushProject
                  PrimarySource: "ConfigSource"
              RunOrder: 1

  ################### CodeBuild Projects ###################

  #### CodeBuild Dockerfile Analysis ####

  ### CodeBuild Service Role
  CodeBuildRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'codebuild', 'service'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - codebuild.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: ServicePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource: !ImportValue 'AnchoreFargateStack:SendFindingsToSecurityHub'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListObject
                Resource: [!Join [ '', [ !GetAtt 'PipelineBucket.Arn', '/*'  ] ], !GetAtt 'PipelineBucket.Arn' ]

  ### CodeBuild Project - Dockerfile Analysis
  CodeBuildDFProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
      Name: !Join [ '-', [ !Ref ResourceName, 'build', 'dockerfile'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec_dockerfile.yml

  #### CodeBuild Project - Secrets Analysis ####
  CodeBuildSecretsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: APP_REPO_URL
            Type: PLAINTEXT
            Value: !GetAtt AppRepository.CloneUrlHttp
      Name: !Join [ '-', [ !Ref ResourceName, 'build', 'secrets'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec_secrets.yml

  #### CodeBuild Project - Vulnerability Scanning ####
  CodeBuildVulnProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: FAIL_WHEN
            Type: PLAINTEXT
            Value: !Ref FailWhen
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Ref ECRRepository
          - Name: IMAGE_ARN
            Type: PLAINTEXT
            Value: !GetAtt ECRRepository.Arn
          - Name: FUNCTION_ARN
            Value: !ImportValue 'AnchoreFargateStack:SendFindingsToSecurityHub'
          - Name: ANCHORE_CLI_URL
            Type: PLAINTEXT
            Value: !Join
              - '/'
              - - http:/
                - !ImportValue 'AnchoreFargateStack:AnchoreLB'
                - v1
          - Name: ANCHORE_CLI_USER
            Type: PLAINTEXT
            Value: admin
          - Name: ANCHORE_CLI_PASS
            Type: PLAINTEXT
            Value:
              !Join
                  - ""
                  - - "{{resolve:secretsmanager:"
                    - !ImportValue 'AnchoreFargateStack:AnchoreAdminPasswordArn'
                    - :SecretString:::}}
      Name: !Join [ '-', [ !Ref ResourceName, 'scan', 'image'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases: 
            pre_build: 
              commands:
                - apt-get update && apt-get install -y python-dev jq
                - docker pull anchore/engine-cli:v0.8.2
                - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py  
                - python get-pip.py
                - pip install awscli
                - $(aws ecr get-login --no-include-email)
                - ANCHORE_CMD="docker run -e ANCHORE_CLI_URL=$ANCHORE_CLI_URL -e ANCHORE_CLI_USER=$ANCHORE_CLI_USER -e ANCHORE_CLI_PASS=$ANCHORE_CLI_PASS anchore/engine-cli:v0.8.2 anchore-cli"
                - $ANCHORE_CMD registry add $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com awsauto awsauto --registry-type=awsecr || return 0
            build: 
              commands:
                - IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
                - docker build $CODEBUILD_SRC_DIR_AppSource -t $IMAGE
                - docker push $IMAGE
            post_build:
              commands:
                - $ANCHORE_CMD image add $IMAGE
                - while [ $($ANCHORE_CMD --json image get $IMAGE | jq -r '.[0].analysis_status') != "analyzed" ]; do sleep 1; done
                - $ANCHORE_CMD --json image vuln $IMAGE os > scan_results.json
                - jq -c --arg image $IMAGE --arg arn $IMAGE_ARN '. + {image_id:$image, image_arn:$arn}' scan_results.json >> tmp.json
                - mv tmp.json scan_results.json
                - aws lambda invoke --function-name $FUNCTION_ARN --invocation-type RequestResponse --payload file://scan_results.json outfile
                - if cat scan_results.json |  jq -r --arg threshold $FAIL_WHEN '.vulnerabilities[] | (.severity==$threshold)' | grep -q true; then echo "Vulnerabilties Found" && exit 1; fi

  #### CodeBuild Project - Build and Push Image ####

  CodeBuildPushProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Join [ '-', [ !Ref ResourceName, 'sample'  ] ]
      Name: !Join [ '-', [ !Ref ResourceName, 'build', 'push'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec_push.yml

Outputs: {}